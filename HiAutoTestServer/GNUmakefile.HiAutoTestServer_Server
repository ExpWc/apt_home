# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.HiAutoTestServer_Server
#
# $Id: gnu.mpd 93117 2011-01-20 12:11:28Z mcorino $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.HiAutoTestServer_Server
DEPENDENCY_FILE  = .depend.HiAutoTestServer_Server
BIN_UNCHECKED    = ./bin/HiAutoTestServer

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  HiAutoTestServerC.cpp \
  HiAutoTestServerS.cpp \
  CorbaImpl.cpp \
  CorbaManager.cpp \
  ServerMain.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lTAO_PortableServer -lTAO_CosNaming -lTAO_AnyTypeCode -lTAO -lACE -lStepBase -lCurveManager -lAutoTestInterface -lSimulinkOffset -lHiMParaCom -lHiMVarCom -lHiMGlobalVar -lHiLog -lDataManager -lHardwareManager -lICDManager -lCaseManager -lservice_control -lHiReport -lStorageManager -lCCard -lrt -ldl
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = rtp

ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),./$(ARCH))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/HiAutoTestServer_Server
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_PortableServer TAO_CosNaming TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) $(AUTO_HOME)/lib $(if $(ARCH),$(AUTO_HOME)/lib/$(ARCH)) $(HRP_HOME)/lib $(if $(ARCH),$(HRP_HOME)/lib/$(ARCH)) $(SOPOLE_HOME)/lib $(if $(ARCH),$(SOPOLE_HOME)/lib/$(ARCH)) $(SIMPOLE_HOME)/include/lib $(if $(ARCH),$(SIMPOLE_HOME)/include/lib/$(ARCH)) /usr/local/lib64 $(if $(ARCH),/usr/local/lib64/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_PortableServer TAO_CosNaming TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L$(AUTO_HOME)/lib -L$(HRP_HOME)/lib -L$(SOPOLE_HOME)/lib -L$(SIMPOLE_HOME)/include/lib -L/usr/local/lib64
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L$(AUTO_HOME)/lib $(if $(ARCH),-L$(AUTO_HOME)/lib/$(ARCH)) -L$(HRP_HOME)/lib $(if $(ARCH),-L$(HRP_HOME)/lib/$(ARCH)) -L$(SOPOLE_HOME)/lib $(if $(ARCH),-L$(SOPOLE_HOME)/lib/$(ARCH)) -L$(SIMPOLE_HOME)/include/lib $(if $(ARCH),-L$(SIMPOLE_HOME)/include/lib/$(ARCH)) -L/usr/local/lib64 $(if $(ARCH),-L/usr/local/lib64/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs -I$(SIMPOLE_HOME)/ServiceControl -I$(HRP_HOME)/HiReport -I$(TAO_ROOT)/orbsvcs/ -I$(HRP_HOME)/tinyxml -I$(AUTO_HOME)/HiCaseManager -I$(AUTO_HOME)/HiICDManager -I$(AUTO_HOME)/HiICDManager/Block -I$(AUTO_HOME)/HiICDManager/Field -I$(AUTO_HOME)/HardwareManager -I$(AUTO_HOME)/CCard -I$(AUTO_HOME)/DataManager -I$(AUTO_HOME)/HiLog -I$(AUTO_HOME)/HiStorageManager -I$(AUTO_HOME)/HiCurveIncManager/Curve -I$(AUTO_HOME)/AutoTestInterface -I$(AUTO_HOME)/StepBase -I$(AUTO_HOME)/HiCaseManager/StepInstance -I$(AUTO_HOME)/HiCaseManager/RTCTimer -I$(SIMPOLE_HOME)/include/HiMGlobalVarLib
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo HiAutoTestServer_Server will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, TAO_PortableServer TAO_CosNaming TAO_AnyTypeCode TAO ACE StepBase CurveManager AutoTestInterface SimulinkOffset HiMParaCom HiMVarCom HiMGlobalVar HiLog DataManager HardwareManager ICDManager CaseManager service_control HiReport StorageManager CCard rt dl, $(foreach libpath, . $(ACE_ROOT)/lib $(AUTO_HOME)/lib $(HRP_HOME)/lib $(SOPOLE_HOME)/lib $(SIMPOLE_HOME)/include/lib /usr/local/lib64, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


