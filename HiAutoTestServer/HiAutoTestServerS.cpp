// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// be/be_codegen.cpp:659

#ifndef _TAO_IDL_HIAUTOTESTSERVERS_SDTZM4_CPP_
#define _TAO_IDL_HIAUTOTESTSERVERS_SDTZM4_CPP_


#include "HiAutoTestServerS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "HiAutoTestServerS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_CARDMANAGERSEQ__SARG_TRAITS_)
#define _AUTOTEST_CARDMANAGERSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::CardManagerSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::CardManagerSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_TY_HI_TIME__SARG_TRAITS_)
#define _AUTOTEST_TY_HI_TIME__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TY_HI_TIME>
    : public
        Fixed_Size_SArg_Traits_T<
            autoTest::TY_HI_TIME,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_RETURNINFO__SARG_TRAITS_)
#define _AUTOTEST_RETURNINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::ReturnInfo>
    : public
        Fixed_Size_SArg_Traits_T<
            autoTest::ReturnInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_TESTEXECUTE__SARG_TRAITS_)
#define _AUTOTEST_TESTEXECUTE__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TestExecute>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::TestExecute,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_CASESTATUSSEQ__SARG_TRAITS_)
#define _AUTOTEST_CASESTATUSSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::CaseStatusSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::CaseStatusSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_STEPSTATUSSEQ__SARG_TRAITS_)
#define _AUTOTEST_STEPSTATUSSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::StepStatusSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::StepStatusSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_SUBSTEPSTATUSSEQ__SARG_TRAITS_)
#define _AUTOTEST_SUBSTEPSTATUSSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::SubStepStatusSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::SubStepStatusSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_FIELDDATA__SARG_TRAITS_)
#define _AUTOTEST_FIELDDATA__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::FieldData>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::FieldData,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_STATUSINFO__SARG_TRAITS_)
#define _AUTOTEST_STATUSINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::StatusInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::StatusInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_EXECUTIVEINFO__SARG_TRAITS_)
#define _AUTOTEST_EXECUTIVEINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::ExecutiveInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::ExecutiveInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_FIELDICDINFO__SARG_TRAITS_)
#define _AUTOTEST_FIELDICDINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::FieldIcdInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::FieldIcdInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:861

#if !defined (_AUTOTEST_MODELINFO__SARG_TRAITS_)
#define _AUTOTEST_MODELINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::ModelInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::ModelInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_RECORDLISTSEQ__SARG_TRAITS_)
#define _AUTOTEST_RECORDLISTSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::RecordListSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::RecordListSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_STORAGEDATASEQ__SARG_TRAITS_)
#define _AUTOTEST_STORAGEDATASEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::StorageDataSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::StorageDataSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_HITIMESEQ__SARG_TRAITS_)
#define _AUTOTEST_HITIMESEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::HiTimeSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::HiTimeSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_TYGETICDINFO__SARG_TRAITS_)
#define _AUTOTEST_TYGETICDINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TyGetIcdInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::TyGetIcdInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_TYSENDICDINFO__SARG_TRAITS_)
#define _AUTOTEST_TYSENDICDINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TySendIcdInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::TySendIcdInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_TYMODELINFO__SARG_TRAITS_)
#define _AUTOTEST_TYMODELINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TyModelInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::TyModelInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_TYSETICDINFO__SARG_TRAITS_)
#define _AUTOTEST_TYSETICDINFO__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::TySetIcdInfo>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::TySetIcdInfo,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:607

#if !defined (_AUTOTEST_STEPINFOSEQ__SARG_TRAITS_)
#define _AUTOTEST_STEPINFOSEQ__SARG_TRAITS_

  template<>
  class SArg_Traits<autoTest::StepInfoSeq>
    : public
        Var_Size_SArg_Traits_T<
            autoTest::StepInfoSeq,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_interface.cpp:1714

class TAO_autoTest_HiAutoTest_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /usr/local/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_autoTest_HiAutoTest_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_autoTest_HiAutoTest_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103,   0, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
     103, 103, 103, 103, 103,  40, 103,  15, 103, 103,
      30,   5, 103,   0, 103, 103, 103, 103,  40,  25,
     103,  62,  20, 103,   0,  20,  15, 103, 103, 103,
      45, 103, 103, 103, 103, 103, 103, 103,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_autoTest_HiAutoTest_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 45,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 11,
      MAX_HASH_VALUE = 102,
      HASH_VALUE_RANGE = 92,
      DUPLICATES = 4,
      WORDLIST_SIZE = 56
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"",0,0},{"",0,0},
      {"getModelVar", &POA_autoTest::HiAutoTest::getModelVar_skel, 0},
      {"getDataByTime", &POA_autoTest::HiAutoTest::getDataByTime_skel, 0},
      {"getIndexByTime", &POA_autoTest::HiAutoTest::getIndexByTime_skel, 0},
      {"getModelDataByTime", &POA_autoTest::HiAutoTest::getModelDataByTime_skel, 0},
      {"getModelIndexByTime", &POA_autoTest::HiAutoTest::getModelIndexByTime_skel, 0},
      {"getICDData", &POA_autoTest::HiAutoTest::getICDData_skel, 0},
      {"setICD", &POA_autoTest::HiAutoTest::setICD_skel, 0},
      {"getFieldData", &POA_autoTest::HiAutoTest::getFieldData_skel, 0},
      {"getRecordList", &POA_autoTest::HiAutoTest::getRecordList_skel, 0},
      {"pause", &POA_autoTest::HiAutoTest::pause_skel, 0},
      {"setModelVar", &POA_autoTest::HiAutoTest::setModelVar_skel, 0},
      {"setCase", &POA_autoTest::HiAutoTest::setCase_skel, 0},
      {"getCaseStatus", &POA_autoTest::HiAutoTest::getCaseStatus_skel, 0},
      {"getStepStatus", &POA_autoTest::HiAutoTest::getStepStatus_skel, 0},
      {"setCurveConfig", &POA_autoTest::HiAutoTest::setCurveConfig_skel, 0},
      {"getServerStatus", &POA_autoTest::HiAutoTest::getServerStatus_skel, 0},
      {"setChannelConfig", &POA_autoTest::HiAutoTest::setChannelConfig_skel, 0},
      {"setStorageConfig", &POA_autoTest::HiAutoTest::setStorageConfig_skel, 0},
      {"getSubStepStatus", &POA_autoTest::HiAutoTest::getSubStepStatus_skel, 0},
      {"getModelRunStatus", &POA_autoTest::HiAutoTest::getModelRunStatus_skel, 0},
      {"getModelParam", &POA_autoTest::HiAutoTest::getModelParam_skel, 0},
      {"start", &POA_autoTest::HiAutoTest::start_skel, 0},
      {"getRecordListNum", &POA_autoTest::HiAutoTest::getRecordListNum_skel, 0},
      {"stop", &POA_autoTest::HiAutoTest::stop_skel, 0},
      {"setICDData", &POA_autoTest::HiAutoTest::setICDData_skel, 0},
      {"sendICDData", &POA_autoTest::HiAutoTest::sendICDData_skel, 0},
      {"stopStep", &POA_autoTest::HiAutoTest::stopStep_skel, 0},
      {"stopManualTest", &POA_autoTest::HiAutoTest::stopManualTest_skel, 0},
      {"startManualTest", &POA_autoTest::HiAutoTest::startManualTest_skel, 0},
      {"_interface", &POA_autoTest::HiAutoTest::_interface_skel, 0},
      {"setModelParam", &POA_autoTest::HiAutoTest::setModelParam_skel, 0},
      {"getDataByIndex", &POA_autoTest::HiAutoTest::getDataByIndex_skel, 0},
      {"_is_a", &POA_autoTest::HiAutoTest::_is_a_skel, 0},
      {"getModelDataByIndex", &POA_autoTest::HiAutoTest::getModelDataByIndex_skel, 0},
      {"_component", &POA_autoTest::HiAutoTest::_component_skel, 0},
      {"_non_existent", &POA_autoTest::HiAutoTest::_non_existent_skel, 0},
      {"stopModel", &POA_autoTest::HiAutoTest::stopModel_skel, 0},
      {"startModel", &POA_autoTest::HiAutoTest::startModel_skel, 0},
      {"getIpInfo", &POA_autoTest::HiAutoTest::getIpInfo_skel, 0},
      {"getCardsInfo", &POA_autoTest::HiAutoTest::getCardsInfo_skel, 0},
      {"getExecutiveInfo", &POA_autoTest::HiAutoTest::getExecutiveInfo_skel, 0},
      {"deleteStorageRecord", &POA_autoTest::HiAutoTest::deleteStorageRecord_skel, 0},
      {"deleteAllStorageRecord", &POA_autoTest::HiAutoTest::deleteAllStorageRecord_skel, 0},
      {"_repository_id", &POA_autoTest::HiAutoTest::_repository_id_skel, 0},
      {"optManualTestOneStep", &POA_autoTest::HiAutoTest::optManualTestOneStep_skel, 0},
    };

  static const signed char lookup[] =
    {
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   11,   -1,   -1, 
        -1,   -1,  -23,   -2,   12,   13,   -1,  -27,   -3,   14,   15,   16,   17,   18, 
        19,   -1,   20,   21,   22, -119,   25,   26, -117,   30,   31,   -1,   32,   33, 
        -1,   -1,   34,   35,   36,   -1,   37,   38,   39,   -1,   -1,   -1,   -1,   40, 
        -1,   -1,   41,   42,   43,   -1,   -1,   -1,   44,   45,   -1,   -1,   46,   47, 
        48,   49,   -1,   -1,   50,   -1,   -1,   -1,   51,   52,   -1,   -1,   53,   -1, 
        54,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   55, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_autoTest_HiAutoTest_Perfect_Hash_OpTable tao_autoTest_HiAutoTest_optable;

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:97

POA_autoTest::HiAutoTest::HiAutoTest (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_autoTest_HiAutoTest_optable;
}

POA_autoTest::HiAutoTest::HiAutoTest (const HiAutoTest& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_autoTest::HiAutoTest::~HiAutoTest (void)
{
}

namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class startManualTest_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline startManualTest_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_->startManualTest ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::startManualTest_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  startManualTest_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class stopManualTest_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline stopManualTest_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_->stopManualTest ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::stopManualTest_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  stopManualTest_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class startModel_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline startModel_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->startModel (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::startModel_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_pData;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_pData
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  startModel_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class stopModel_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline stopModel_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->stopModel (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::stopModel_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_modelName;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelName
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  stopModel_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelRunStatus_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelRunStatus_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getModelRunStatus (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelRunStatus_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_modelName;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_modelStatus;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelName,
      &_tao_modelStatus
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelRunStatus_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setICDData_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setICDData_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TySetIcdInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TySetIcdInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->setICDData (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setICDData_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TySetIcdInfo>::in_arg_val _tao_icdInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_icdNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_icdInfo,
      &_tao_icdNum
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setICDData_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class sendICDData_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline sendICDData_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TySendIcdInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TySendIcdInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->sendICDData (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::sendICDData_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TySendIcdInfo>::in_arg_val _tao_icdInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_icdNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_icdInfo,
      &_tao_icdNum
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  sendICDData_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getICDData_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getICDData_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::out_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[3])->arg ();
        
      retval =
        this->servant_->getICDData (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getICDData_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::in_arg_val _tao_icdInfoIn;
  TAO::SArg_Traits< ::autoTest::TyGetIcdInfo>::out_arg_val _tao_icdInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_icdNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_icdInfoIn,
      &_tao_icdInfo,
      &_tao_icdNum
    };
  
  static size_t const nargs = 4;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getICDData_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelParam_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelParam_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[3])->arg ();
        
      retval =
        this->servant_->getModelParam (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelParam_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val _tao_modelInfoIn;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_val _tao_modelInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_modelNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelInfoIn,
      &_tao_modelInfo,
      &_tao_modelNum
    };
  
  static size_t const nargs = 4;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelParam_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setModelParam_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setModelParam_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->setModelParam (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setModelParam_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val _tao_modelInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_modelNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelInfo,
      &_tao_modelNum
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setModelParam_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelVar_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelVar_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[3])->arg ();
        
      retval =
        this->servant_->getModelVar (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelVar_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val _tao_modelInfoIn;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::out_arg_val _tao_modelInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_modelNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelInfoIn,
      &_tao_modelInfo,
      &_tao_modelNum
    };
  
  static size_t const nargs = 4;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelVar_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setModelVar_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setModelVar_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->setModelVar (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setModelVar_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TyModelInfo>::in_arg_val _tao_modelInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_modelNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_modelInfo,
      &_tao_modelNum
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setModelVar_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class optManualTestOneStep_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline optManualTestOneStep_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->optManualTestOneStep (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::optManualTestOneStep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_oneStep;
  TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_oneStep,
      &_tao_info
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  optManualTestOneStep_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setCase_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setCase_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->setCase (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setCase_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_caseData;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_caseData
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setCase_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setICD_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setICD_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->setICD (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setICD_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_ICDInfo;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ICDInfo
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setICD_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setChannelConfig_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setChannelConfig_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->setChannelConfig (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setChannelConfig_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_channelConfig;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_channelConfig
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setChannelConfig_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setCurveConfig_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setCurveConfig_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->setCurveConfig (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setCurveConfig_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_curveInfo;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_curveInfo
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setCurveConfig_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class start_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline start_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::TestExecute>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::TestExecute>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->start (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::start_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::TestExecute>::in_arg_val _tao_testExecute;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_testExecute
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  start_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class pause_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline pause_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_->pause ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::pause_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  pause_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class stop_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline stop_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_->stop ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::stop_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  stop_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class stopStep_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline stopStep_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::StepInfoSeq>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::StepInfoSeq>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->stopStep (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::stopStep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::StepInfoSeq>::in_arg_val _tao_stepInfo;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_stepInfo
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  stopStep_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getCaseStatus_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getCaseStatus_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getCaseStatus (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getCaseStatus_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::in_arg_val _tao_cardStatusDess;
  TAO::SArg_Traits< ::autoTest::CaseStatusSeq>::out_arg_val _tao_cardStatusVals;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_cardStatusDess,
      &_tao_cardStatusVals
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getCaseStatus_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getStepStatus_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getStepStatus_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::StepStatusSeq>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::StepStatusSeq>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getStepStatus (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getStepStatus_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::StepStatusSeq>::in_arg_val _tao_stepStatusDess;
  TAO::SArg_Traits< ::autoTest::StepStatusSeq>::out_arg_val _tao_stepStatusVals;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_stepStatusDess,
      &_tao_stepStatusVals
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getStepStatus_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getSubStepStatus_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getSubStepStatus_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getSubStepStatus (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getSubStepStatus_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::in_arg_val _tao_subStepStatusDess;
  TAO::SArg_Traits< ::autoTest::SubStepStatusSeq>::out_arg_val _tao_subStepStatusVals;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_subStepStatusDess,
      &_tao_subStepStatusVals
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getSubStepStatus_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getFieldData_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getFieldData_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::FieldData>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::FieldData>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::FieldData>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::FieldData>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getFieldData (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getFieldData_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::FieldData>::in_arg_val _tao_fieldDataDess;
  TAO::SArg_Traits< ::autoTest::FieldData>::out_arg_val _tao_fieldDataVals;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_fieldDataDess,
      &_tao_fieldDataVals
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getFieldData_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getCardsInfo_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getCardsInfo_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::CardManagerSeq>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::CardManagerSeq>::out_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->getCardsInfo (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getCardsInfo_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::CardManagerSeq>::out_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_info
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getCardsInfo_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getServerStatus_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getServerStatus_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::StatusInfo>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::StatusInfo>::out_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->getServerStatus (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getServerStatus_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::StatusInfo>::out_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_info
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getServerStatus_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getExecutiveInfo_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getExecutiveInfo_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::ExecutiveInfo>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::ExecutiveInfo>::out_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->getExecutiveInfo (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getExecutiveInfo_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::ExecutiveInfo>::out_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_info
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getExecutiveInfo_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class setStorageConfig_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline setStorageConfig_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->setStorageConfig (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::setStorageConfig_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageInfo;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageInfo
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  setStorageConfig_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getRecordListNum_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getRecordListNum_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->getRecordListNum (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getRecordListNum_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_listNum;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_listNum
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getRecordListNum_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getRecordList_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getRecordList_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< ::autoTest::RecordListSeq>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< ::autoTest::RecordListSeq>::out_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[2])->arg ();
        
      retval =
        this->servant_->getRecordList (
          arg_1
          , arg_2);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getRecordList_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< ::autoTest::RecordListSeq>::out_arg_val _tao_pList;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_listLen;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_pList,
      &_tao_listLen
    };
  
  static size_t const nargs = 3;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getRecordList_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getDataByTime_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getDataByTime_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val *> (this->args_[6])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::inout_arg_type arg_7 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val *> (this->args_[7])->arg ();
        
      retval =
        this->servant_->getDataByTime (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getDataByTime_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_startTime;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_stopTime;
  TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val _tao_pData;
  TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val _tao_pTime;
  TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val _tao_maxCount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startTime,
      &_tao_stopTime,
      &_tao_pData,
      &_tao_pTime,
      &_tao_maxCount
    };
  
  static size_t const nargs = 8;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getDataByTime_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getDataByIndex_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getDataByIndex_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val *> (this->args_[6])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::inout_arg_type arg_7 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val *> (this->args_[7])->arg ();
        
      retval =
        this->servant_->getDataByIndex (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getDataByIndex_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_startIndex;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_stopIndex;
  TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val _tao_pData;
  TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val _tao_pTime;
  TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val _tao_maxCount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startIndex,
      &_tao_stopIndex,
      &_tao_pData,
      &_tao_pTime,
      &_tao_maxCount
    };
  
  static size_t const nargs = 8;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getDataByIndex_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getIndexByTime_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getIndexByTime_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[6])->arg ();
        
      retval =
        this->servant_->getIndexByTime (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getIndexByTime_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::FieldIcdInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_startTime;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_stopTime;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_startIndex;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_stopIndex;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startTime,
      &_tao_stopTime,
      &_tao_startIndex,
      &_tao_stopIndex
    };
  
  static size_t const nargs = 7;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getIndexByTime_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class deleteStorageRecord_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline deleteStorageRecord_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->deleteStorageRecord (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::deleteStorageRecord_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  deleteStorageRecord_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class deleteAllStorageRecord_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline deleteAllStorageRecord_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_->deleteAllStorageRecord ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::deleteAllStorageRecord_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  deleteAllStorageRecord_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelDataByTime_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelDataByTime_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val *> (this->args_[6])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::inout_arg_type arg_7 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val *> (this->args_[7])->arg ();
        
      retval =
        this->servant_->getModelDataByTime (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelDataByTime_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_startTime;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_stopTime;
  TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val _tao_pData;
  TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val _tao_pTime;
  TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val _tao_maxCount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startTime,
      &_tao_stopTime,
      &_tao_pData,
      &_tao_pTime,
      &_tao_maxCount
    };
  
  static size_t const nargs = 8;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelDataByTime_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelDataByIndex_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelDataByIndex_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val *> (this->args_[6])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::inout_arg_type arg_7 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val *> (this->args_[7])->arg ();
        
      retval =
        this->servant_->getModelDataByIndex (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6
          , arg_7);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelDataByIndex_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_startIndex;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_stopIndex;
  TAO::SArg_Traits< ::autoTest::StorageDataSeq>::out_arg_val _tao_pData;
  TAO::SArg_Traits< ::autoTest::HiTimeSeq>::out_arg_val _tao_pTime;
  TAO::SArg_Traits< ::CORBA::Long>::inout_arg_val _tao_maxCount;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startIndex,
      &_tao_stopIndex,
      &_tao_pData,
      &_tao_pTime,
      &_tao_maxCount
    };
  
  static size_t const nargs = 8;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelDataByIndex_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getModelIndexByTime_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getModelIndexByTime_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_type arg_2 =
        static_cast<TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val *> (this->args_[2])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_3 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[3])->arg ();
        
      TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_type arg_4 =
        static_cast<TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val *> (this->args_[4])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_5 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[5])->arg ();
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_6 =
        static_cast<TAO::SArg_Traits< ::CORBA::Long>::out_arg_val *> (this->args_[6])->arg ();
        
      retval =
        this->servant_->getModelIndexByTime (
          arg_1
          , arg_2
          , arg_3
          , arg_4
          , arg_5
          , arg_6);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getModelIndexByTime_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_storageName;
  TAO::SArg_Traits< ::autoTest::ModelInfo>::in_arg_val _tao_varInfo;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_startTime;
  TAO::SArg_Traits< ::autoTest::TY_HI_TIME>::in_arg_val _tao_stopTime;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_startIndex;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_stopIndex;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_storageName,
      &_tao_varInfo,
      &_tao_startTime,
      &_tao_stopTime,
      &_tao_startIndex,
      &_tao_stopIndex
    };
  
  static size_t const nargs = 7;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getModelIndexByTime_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class getIpInfo_HiAutoTest
    : public TAO::Upcall_Command
  {
  public:
    inline getIpInfo_HiAutoTest (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::out_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::out_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_->getIpInfo (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// be/be_visitor_operation/operation_ss.cpp:173

void POA_autoTest::HiAutoTest::getIpInfo_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::autoTest::ReturnInfo>::ret_val retval;
  TAO::SArg_Traits< char *>::out_arg_val _tao_ipInfo;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ipInfo
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);

  getIpInfo_HiAutoTest command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:170


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_HiAutoTest_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_HiAutoTest_Upcall_Command (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val *> (this->args_[0])->arg ();
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        static_cast<TAO::SArg_Traits< char *>::in_arg_val *> (this->args_[1])->arg ();
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

void POA_autoTest::HiAutoTest::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);
  
  _is_a_HiAutoTest_Upcall_Command command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_HiAutoTest_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_HiAutoTest_Upcall_Command (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

void POA_autoTest::HiAutoTest::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);
  
  _non_existent_HiAutoTest_Upcall_Command command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_HiAutoTest_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_HiAutoTest_Upcall_Command (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< char *>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

void POA_autoTest::HiAutoTest::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);
  
  _repository_id_HiAutoTest_Upcall_Command command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// be/be_visitor_interface/interface_ss.cpp:525

void POA_autoTest::HiAutoTest::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_autoTest
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_HiAutoTest_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_HiAutoTest_Upcall_Command (
      POA_autoTest::HiAutoTest * servant,
      TAO::Argument * const args[])
      : servant_ (servant)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        static_cast<TAO::SArg_Traits< ::CORBA::Object>::ret_val *> (this->args_[0])->arg ();
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_autoTest::HiAutoTest * const servant_;
    TAO::Argument * const * const args_;
  };
}

void POA_autoTest::HiAutoTest::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_autoTest::HiAutoTest * const impl =
    static_cast<POA_autoTest::HiAutoTest *> (servant);
  
  _get_component_HiAutoTest_Upcall_Command command (
    impl,
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_autoTest::HiAutoTest::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:autoTest/HiAutoTest:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_autoTest::HiAutoTest::_interface_repository_id (void) const
{
  return "IDL:autoTest/HiAutoTest:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:966

void POA_autoTest::HiAutoTest::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:884

autoTest::HiAutoTest *
POA_autoTest::HiAutoTest::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, false, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::autoTest::HiAutoTest STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        0
      );
}

#endif /* ifndef */

